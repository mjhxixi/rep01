IO流的概念 什么是IO流?
它是指数据从源头流到目的地，所以常把这种数据流叫做IO流。常用来处理
设备之间的数据传输、文件的上传、下载、拷贝。流分输入和输出，输入流
从文件中读取数据存储到进程中，输出流从进程中读取数据然后写入到目标文件。
字节流和字符流哪个好？怎么选择？
大多数情况下使用字节流会更好，因为大多数时候IO操作都是直接操作磁盘文件，
所以这些流在传输时都是以字节的方式进行的（图片等都是按字节存储的）
如果对于操作需要通过IO在内存中频繁处理字符串的情况使用字符流会好些，
因为字符流具备缓冲区，提高了性能。

8.18
java中有几种类型的流？jdk为每种类型的流提供了一些抽象类以供继承，说说
它们分别是什么？
从大的方面来分可以分为字节流和字符流，字符流提供了reader和writer；字节
流提供了outputstream和inputstream
讲讲NIO：传统的IO流是阻塞式的，会一直监听一个Ser

8.19
excute、excuteQuery、excuteUpdate的区别是什么？
excute:可用于执行任何sql语句，返回一个boolean值，表明执行该sql语句是否
返回了ResultSet。但它执行sql语句比较麻烦，一般不用。
excuteQuery:这个方法一般用于执行Select语句，会返回一个ResultSet结果集
excuteUpdate：这个方法可执行Update、Insert、Delete语句，返回值是一个
整数（int）、返回受影响的行数。
相对于Statement、PreparedStatement的优点是什么
它和Statement相比优点在于：PrepareStatement有助于防止SQL注入，因为它
会自动对特殊字符转义。PreparedStatement可以用来进行动态查询。PrepareStatement
执行更快。尤其当你重用它或者使用它的拼量查询接口执行多条语句时。使用
PreparedStatement的setter方法更容易写出面向对象的代码，而Statement的
话，我们得拼接字符串来生成查询语句。如果参数太多，字符串拼接看起来会非常
丑陋并且容易出错。


jsp的四种作用域
Web应用中，JSP创建的对象有一定的生命周期，也有可能被其他组件或者对象访问。对象的声明周期和可访问性称为作用域。四种范围对象作用域从小到大顺序如下：pageContext----request----session----application。
（1）pageContext：页面域
页面作用域仅限于当前页面对象，可以近似于理解为java的this对象，离开当前JSP页面（无论是redirect还是forward），则pageContext中的所有属性值就会丢失。
（2）request：请求域
  请求作用域是同一个请求之内，在页面跳转时，如果通过forward方式跳转，则forward目标页面仍然可以拿到request中的属性值。如果通过redirect方式进行页面跳转，由于redirect相当于重新发出的请求，此种场景下，request中的属性值会丢失。
（3）session：会话域
会话作用域是在一个会话的生命周期内，会话失效，则session中的数据也随之丢失。
（4）application： 应用域
应用作用域是最大的，只要服务器不停止，则application对象就一直存在，并且为所有会话所共享。
如果禁止cookie的话session还能用吗

详细描述MVC

基于java的web应用系统采用MVC设计模型，即用Model（模型）、View（视图）和Controller（控制）分离设计，这是目前web应用服务系统的主流设置方向。
Model：处理业务逻辑的模块。
View：负责页面显示，显示Model的处理结果给用户，主要实现数据到页面的转换过程。
Controller：负责每个请求的分发，把Form数据传递给Model进行处理，处理完成后，把处理结果返回给相应的View显示给用户。


✍🏼每日一题8.31面试题

️JSP的四种作用域。

包括page、request、session和application，具体来说：
①page代表与一个页面相关的对象和属性。
②request代表与Web客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个Web组件；需要在页面显示的临时数据可以置于此作用域。
③session代表某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的session中。
④application代表与整个Web应用程序相关的对象和属性，它实质上是跨越整个Web应用程序，包括多个页面、
请求和会话的一个全局作用域。

**&和&&的联系(共同点)：**

&和&&都可以用作逻辑与运算符，但是要看使用时的具体条件来决定。

操作数1&操作数2，操作数1&&操作数2，

表达式1&表达式2，表达式1&&表达式2，

情况1：当上述的操作数是boolean类型变量时，&和&&都可以用作逻辑与运算符。

情况2：当上述的表达式结果是boolean类型变量时，&和&&都可以用作逻辑与运算符。

表示逻辑与(and)，当运算符两边的表达式的结果或操作数都为true时，整个运算结果才为true，否则，只要有一方为false，结果都为false。

9.2
Java 中的异常处理机制的简单原理和应用。 
当 JAVA 程序违反了 JAVA 的语义规则时，JAVA 虚拟机就会将发生的错误表示为一个异常。违反语义规则包括 2 种情况。一种是 JAVA 类库内置的语义检查。例如数组下标
越界,会引发 IndexOutOfBoundsException;访问 null 的对象时会引发 NullPointerException。另一种情况就是 JAVA 允许程序员扩展这种语义检查，程序员可以创建自己的
异常，并自由选择在何时用 throw 关键字引发异常。所有的异常都是 java.lang.Thowable 的子类。
邢子婧
17:59
垃圾回收的优点和原理。并考虑 2 种回收机制。 
Java 语言中一个显著的特点就是引入了垃圾回收机制，使 c++程序员最头疼的内存管理的问题迎刃而解，它使得 Java 程序员在编写程序的时候不再需要考虑内存管理。由于
有个垃圾回收机制，Java 中的对象不再有“作用域”的概念，只有对象的引用才有“作用域”。垃圾回收可以有效的防止内存泄露，有效的使用可以使用的内存。垃圾回收器
通常是作为一个单独的低级别的线程运行，不可预知的情况下对内存堆中已经死亡的或者长时间没有使用的对象进行清除和回收，程序员不能实时的调用垃圾回收器对某个对
象或所有对象进行垃圾回收。


@RequestMapping 的作用是什么？

RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。
RequestMapping注解有六个属性，下面我们把她分成三类进行说明。
①value：指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）；method：指定请求的method类型， GET、POST、PUT、DELETE等；
②consumes：指定处理请求的提交内容类型（Content-Type），例如application/json, text/html；produces：指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；
③params： 指定request中必须包含某些参数值是，才让该方法处理。headers：指定request中必须包含某些指定的header值，才能让该方法处理请求。